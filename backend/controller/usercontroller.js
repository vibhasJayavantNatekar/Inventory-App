const express = require('express')
const User = require('../models/user.js')
const PDFDocument = require('pdfkit-table')
const ExcelJS = require("exceljs");


const fs = require('fs')


//CREATE USER

async function CreateUser(req, res) {
  const lastUser = await User.findOne().sort({ userID: -1 });
  const userID = lastUser ? lastUser.userID + 1 : 1500;

  const { name, email, password, active, role } = req.body



  try {


    const users = await User.create({ userID, name, email, password, active, role })


    res.status(200).json({ message: "Ueser added successfully.." })
  } catch (error) {
    res.status(500).json({ error })
  }
}

//GET ALL USERS

async function getAllUsers(req, res) {
  try {
    const users = await User.find({})
    res.status(200).json({users})
  } catch (error) {

    res.status(500).json({ error })

  }

}

//GET USERS BY ID

async function getUsersById(req, res) {
  const { id } = req.params
  try {
    const users = await User.find(id)
    res.status(200).json(users)

  } catch (error) {
    res.status(500).json({ message: error })

  }
}


//DELETE USER

async function DeleteUser(req, res) {
  const { id } = req.params

  try {
    await User.findByIdAndDelete(id)
    res.status(200).json({ message: "Deleted user ..." })
  } catch (error) {

    res.status(500).json(error)

  }
}


//UPDATE USER

async function updateUser(req, res) {
  const { id } = req.params
  const {name,email, password,active ,role}= req.body

  try {
    const users = await User.findByIdAndUpdate(id ,{name,email,password,active,role})
    res.status(200).json({ message: "Updated .." })
  } catch (error) {

    res.status(500).json(error)

  }
}

//GET PDF




async function getPdf(req, res) {
  try {
    const users = await User.find({});

    const doc = new PDFDocument({ margin: 30, size: "A4" });
    const filePath = "users.pdf";
    const writeStream = fs.createWriteStream(filePath);
    doc.pipe(writeStream);

  
    doc.font("Helvetica-Bold")
      .fontSize(20)
      .fillColor("#2b2b2b")
      .text("Users List", { align: "center" })
      .moveDown(1);

    
    const table = {
      title: " ",
      headers: [
        { label: "User ID", property: "userID", width: 60 },
        { label: "Name", property: "name", width: 120 },
        { label: "Email", property: "email", width: 180 },
        { label: "Role", property: "role", width: 80 },
      ],
      datas: users.map((u) => ({
        userID: u.userID?.toString() || "N/A",
        name: u.name || "N/A",
        email: u.email || "N/A",
        role: u.role || "N/A",
      })),
    };

  
    await doc.table(table, {
      prepareHeader: () => doc.font("Helvetica-Bold").fontSize(12),
      prepareRow: (row, indexColumn, indexRow, rectRow) => {
        doc.font("Helvetica").fontSize(10);
        if (indexRow % 2 === 0) doc.addBackground(rectRow, "#f9f9f9", 0.5); // alternate row color
      },
      columnsSize: [60, 120, 180, 80],
      x: doc.page.margins.left,
      y: 100,
      width: doc.page.width - doc.page.margins.left - doc.page.margins.right,
      divider: {
        header: { disabled: false, width: 0.5, opacity: 0.5 },
        horizontal: { disabled: false, width: 0.3, opacity: 0.3 },
      },
    });

   
    doc.moveDown(2)
      .fontSize(10)
      .fillColor("gray")
      .text("Generated by Vibhas © " + new Date().getFullYear(), {
        align: "center",
      });

    // Finalize PDF
    doc.end();
    writeStream.on("finish", () => res.download(filePath, "users.pdf"));
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: error.message });
  }
}

//get excel

async function getUsersExcel(req, res) {
  try {
    const users = await User.find({});

    const workbook = new ExcelJS.Workbook();
    const sheet = workbook.addWorksheet("Users");

    sheet.mergeCells("A1", "E1");
    sheet.getCell("A1").value = "User List";
    sheet.getCell("A1").font = { size: 16, bold: true };
    sheet.getCell("A1").alignment = { horizontal: "center" };

    sheet.addRow([]);
    const headerRow = sheet.addRow(["User ID", "Name", "Email", "Role", "Active"]);

    headerRow.eachCell((cell) => {
      cell.font = { bold: true, color: { argb: "FFFFFFFF" } };
      cell.fill = { type: "pattern", pattern: "solid", fgColor: { argb: "FF333399" } };
      cell.alignment = { horizontal: "center" };
      cell.border = {
        top: { style: "thin" },
        left: { style: "thin" },
        bottom: { style: "thin" },
        right: { style: "thin" },
      };
    });

    users.forEach((u) => {
      sheet.addRow([
        u.userID || "—",
        u.name || "—",
        u.email || "—",
        u.role || "—",
        u.active ? "Active" : "Inactive",
      ]);
    });

    sheet.columns = [
      { width: 12 },
      { width: 25 },
      { width: 35 },
      { width: 15 },
      { width: 12 },
    ];

    const filePath = "users.xlsx";
    await workbook.xlsx.writeFile(filePath);
    res.download(filePath, "users.xlsx");
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
}

module.exports = { CreateUser, getAllUsers, getUsersById, DeleteUser, updateUser, getPdf ,getUsersExcel }




